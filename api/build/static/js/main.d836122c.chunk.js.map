{"version":3,"sources":["components/Header.js","components/Home.js","components/Tweet.js","components/TweetList.js","components/SearchTweets.js","components/RandomTweets.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","activeClassName","Home","Tweet","twett","src","profile_image_url","alt","screen_name","name","created_at","text","retwett_count","favorite_count","TweetList","twetts","map","key","id","SearchTweets","getRequest","input","a","async","url","fetch","request","json","data","result","item","push","setState","searchResult","handleChange","event","query","target","value","handleSubmit","preventDefault","state","onSubmit","this","onChange","Component","RandomTweets","handleClick","username","isPrepared","onClick","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d836122c.chunk.js","sourcesContent":["import React from 'react';\nimport {Link, NavLink} from 'react-router-dom';\n\nconst Header = () => (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-info\">\n        <div className=\"container\">\n            <Link to=\"/home\" className=\"navbar-brand\">\n                Twitter Showcase\n            </Link>\n\n            <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item\">\n                    <NavLink\n                        to=\"/home\"\n                        className=\"nav-link\"\n                        activeClassName=\"active\"\n                    >Home</NavLink>\n                </li>\n                <li className=\"nav-item\">\n                    <NavLink \n                        to=\"/search\"\n                        className=\"nav-link\"\n                        activeClassName=\"active\"\n                    >Search</NavLink>\n                </li>\n                <li className=\"nav-item\">\n                    <NavLink \n                        to=\"/random\"\n                        className=\"nav-link\"\n                        activeClassName=\"active\"\n                    >Random</NavLink>\n                </li>\n            </ul>\n        </div>\n    </nav>\n);\n\nexport default Header;","import React from 'react';\n\nfunction Home(){\n    return (\n        <h1 className=\"text-center\">Hello from Home</h1>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nconst Tweet = ({twett}) => (\n    <div className=\"twett row\">\n        <div className=\"avatar\">\n            <img \n                src={twett.profile_image_url}\n                alt={twett.screen_name} \n                className=\"avatar-image\" />\n        </div>\n        <div className=\"twett-content\">\n            <div className=\"twett-author\">@{twett.screen_name}</div>\n            <div className=\"twett-name\"><span> </span>{twett.name}</div>\n            <div className=\"twett-date\">{twett.created_at}</div>\n        </div>\n        <div className=\"twett-text\">{twett.text}</div>\n        <div className=\"twett-social\">\n            <div className=\"flex-item\">\n                {twett.retwett_count}\n                <i className=\"ico-retwett\"></i>\n            </div>\n            <div className=\"flex-item\">\n                {twett.favorite_count}\n                <i className=\"ico-favorite\"></i>\n            </div>\n        </div>\n\n    </div>\n);\n\nexport default Tweet;","import React from 'react';\nimport Tweet from './Tweet';\n\nconst TweetList = ({twetts}) => (\n    <div className=\"container row\">\n        <div className=\"tweet\">\n            {twetts.map(twett => (\n                <div key={twett.id}>\n                    <Tweet \n                        twett={twett}\n                        key={twett.id}\n                    />\n                </div>\n            ))}\n        </div>\n    </div>\n);\n\nexport default TweetList;","import React, {Component} from 'react';\nimport TweetList from './TweetList';\n\n\nclass SearchTweets extends Component {\n    constructor(){\n        super();\n        this.state = {\n          searchResult: []\n        }\n    }\n    componentDidMount(){\n        //this.getRequest();\n    }\n\n    getRequest = async (input) => {\n        const url = `http://localhost:9000/search/?input=${input}`;\n\n        const request = await fetch(url);\n        const data = await request.json();\n        const result = [];\n        data.map(item => { result.push(item)});\n        \n        this.setState({\n           searchResult: result\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            query: event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        const query = this.state.query;\n\n        this.getRequest(query);\n    }\n    \n    render(){\n        return (\n            <div className=\"container\">\n                <h1 className=\"text-center\">Search Twetts about any Topic</h1>\n                <div className=\"\">\n                    <form onSubmit={this.handleSubmit}>\n                    <input\n                        name=\"query\"\n                        className=\"form-control form-control-lg\" \n                        onChange={this.handleChange}/>\n                    </form>\n                </div>\n                <div className=\"\">\n                   <TweetList twetts={this.state.searchResult} />\n                    \n                </div>\n            </div>\n    \n        );    \n    }\n    \n}\n\nexport default SearchTweets;","import React, {Component} from 'react';\nimport Tweet from './Tweet';\n\n\n\nclass RandomTweets extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n         twett: [],\n         username: '',\n         isPrepared: false\n        }\n    } \n\n    componentDidMount(){\n     \n    }\n    handleClick = (input) => {\n        this.getRequest(input);\n    }\n\n    async getRequest(input){\n        const url = `http://localhost:9000/users/?input=${input}`;\n\n        const request = await fetch(url);\n        const data = await request.json();\n        \n        this.setState({\n           twett: data,\n           isPrepared: true\n        })\n    }\n\n\n    render(){\n        return (\n            <div className=\"container\">\n                <h1 className=\"text-center\">Get a random twett from:</h1>\n                <div className=\"row\">\n                   <div className=\"col-md-2\">\n                       <span className=\"\">Brendan Eich</span>\n                       <button onClick={() => this.handleClick('brendaneich')}>\n                           Show Twetts\n                        </button>\n                    </div>\n                    <div className=\"col-md-2\">\n                       <span className=\"\">Lea Verou</span>\n                       <button onClick={() => this.handleClick('LeaVerou')}>\n                           Show Twetts\n                        </button>\n                    </div>\n                    <div className=\"col-md-2\">\n                    <span className=\"\">Dan Abramov</span>\n                       <button onClick={() => this.handleClick('dan_abramov')}>\n                           Show Twetts\n                        </button>\n                    </div>\n                    <div className=\"col-md-2\">\n                    <span className=\"\">Kent C Dodds.</span>\n                       <button onClick={() => this.handleClick('kentcdodds')}>\n                           Show Twetts\n                        </button>\n                    </div>\n                    <div className=\"col-md-2\">\n                    <span className=\"\">Natalie MacLees</span>\n                       <button onClick={() => this.handleClick('nataliemac')}>\n                           Show Twetts\n                        </button>\n                    </div>\n\n                </div>\n                <div className=\"\">\n                    {this.state.isPrepared ?  <Tweet \n                        twett={this.state.twett}\n                    /> : '' }\n                   \n                   \n                </div>\n            </div>\n    \n        );    \n    }\n    \n}\n\nexport default RandomTweets;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport SearchTweets from './components/SearchTweets';\nimport RandomTweets from './components/RandomTweets';\n\n\nclass App extends Component {\n \n \n  render() {\n    return (\n      <div className=\"\">\n        <Router>\n          <Header />\n          <main className=\"container mt-5\">\n            <Switch>\n              <Route exact path=\"/home\"\n                component={Home} />\n              <Route exact path=\"/search\"\n                component={SearchTweets} />\n              <Route exact path=\"/random\"\n                component={RandomTweets} />\n            </Switch>\n          </main>\n          <footer className=\"text-center\">Twtter Showcase App.</footer>\n        </Router>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}